import React, { useEffect, useState } from "react";
import {
  Card,
  Table,
  Button,
  Modal,
  Form,
  Input,
  Avatar,
  Upload,
  message,
  Space,
} from "antd";
import {
  UserOutlined,
  EditOutlined,
  HomeOutlined,
  UploadOutlined,
} from "@ant-design/icons";
import { useNavigate } from "react-router-dom";
import api from "../../config/axios";
import { toast } from "react-toastify";

const UserProfile = () => {
  
  const [user, setUser] = useState(null);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [loading, setLoading] = useState(false);
  const [form] = Form.useForm();
  const navigate = useNavigate();

  // L·∫•y th√¥ng tin user
  const fetchUser = async () => {
    try {
      const res = await api.get("/user/me");
      if (res.data?.data) {
        setUser(res.data.data);
      } else {
        toast.error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng!");
      }
    } catch (err) {
      console.error(err);
      toast.error("L·ªói khi t·∫£i th√¥ng tin ng∆∞·ªùi d√πng!");
    }
  };

  useEffect(() => {
    fetchUser();
  }, []);

  // M·ªü modal
  const showModal = () => {
    setIsModalVisible(true);
    form.setFieldsValue({
      fullName: user.fullName,
      phone: user.phone,
      address: user.address,
    });
  };

  // G·ª≠i c·∫≠p nh·∫≠t
  const handleOk = async () => {
    try {
      const values = await form.validateFields();

      setLoading(true);
      const res = await api.put("/user/me", values);

      if (res.data?.data) {
        setUser(res.data.data);
        toast.success("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
        setIsModalVisible(false);
      } else {
        toast.error(" C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
      }
    } catch (error) {
      console.error(error);
      toast.error("Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin!");
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => setIsModalVisible(false);

  if (!user) {
    return <Card style={{ margin: 20 }}>ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng...</Card>;
  }

  const data = [
    { key: "1", label: "Email", value: user.email },
    { key: "2", label: "H·ªç v√† t√™n", value: user.fullName },
    { key: "3", label: "Vai tr√≤", value: user.role },
    { key: "4", label: "S·ªë ƒëi·ªán tho·∫°i", value: user.phone || "Ch∆∞a c·∫≠p nh·∫≠t" },
    { key: "5", label: "ƒê·ªãa ch·ªâ", value: user.address || "Ch∆∞a c·∫≠p nh·∫≠t" },
    {
      key: "6",
      label: "T√™n c·ª≠a h√†ng",
      value: user.role === "SELLER" ? user.storeName : null,
    },
    {
      key: "7",
      label: "Description",
      value: user.role === "SELLER" ? user.storeDescription : null,
    },
    {
      key: "8",
      label: "T√™n c·ª≠a h√†ng",
      value: user.role === "SELLER" ? user.socialMedia : null,
    },
  ].filter((item) => item.value !== null);

  const columns = [
    {
      title: "Th√¥ng tin",
      dataIndex: "label",
      key: "label",
      render: (text) => <b>{text}</b>,
      width: "30%",
    },
    {
      title: "Gi√° tr·ªã",
      dataIndex: "value",
      key: "value",
      render: (text) => <span style={{ color: "#555" }}>{text}</span>,
    },
  ];

  // // üì∑ Upload avatar (l∆∞u base64 ho·∫∑c URL)
  // const handleUpload = (info) => {
  //   const file = info.file.originFileObj;
  //   const reader = new FileReader();
  //   reader.onload = (e) => {
  //     form.setFieldValue("avatar", e.target.result); // g√°n base64
  //     message.success("·∫¢nh ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n!");
  //   };
  //   reader.readAsDataURL(file);
  // };

  return (
    <div
      className="overflow-x-hidden"
      style={{
        backgroundImage: "url('/background.png')",
        backgroundSize: "cover",
        backgroundPosition: "center",
        backgroundAttachment: "fixed",
        backgroundRepeat: "no-repeat",
        minHeight: "100vh",
      }}
    >
      <Card
        style={{
          width: "90%",
          margin: "20px auto",
          borderRadius: 16,
          boxShadow: "0 6px 18px rgba(0,0,0,0.1)",
          padding: "30px",
          backgroundColor: "#fff",
        }}
      >
        {/* Header */}
        <div
          style={{
            display: "flex",
            alignItems: "center",
            marginBottom: 30,
            justifyContent: "space-between",
          }}
        >
          <Space align="center">
            <Avatar
              size={100}
              src={user.avatar}
              icon={<UserOutlined />}
              style={{ border: "2px solid #eee" }}
            />
            <div style={{ marginLeft: 20 }}>
              <h2 style={{ marginBottom: 4 }}>{user.fullName}</h2>
              <p style={{ color: "#888", marginBottom: 0 }}>{user.role}</p>
            </div>
          </Space>

          <Space>
            <Button
              type="default"
              icon={<HomeOutlined />}
              onClick={() => navigate("/")}
              style={{ borderRadius: 8 }}
            >
              Quay v·ªÅ Home
            </Button>
            <Button
              type="primary"
              icon={<EditOutlined />}
              onClick={showModal}
              style={{
                borderRadius: 8,
                background: "#1677ff",
                fontWeight: 500,
              }}
            >
              C·∫≠p nh·∫≠t th√¥ng tin
            </Button>
          </Space>
        </div>

        {/* Table */}
        <Table
          dataSource={data}
          columns={columns}
          pagination={false}
          bordered
          style={{
            borderRadius: 12,
            overflow: "hidden",
          }}
        />

        {/* Modal update */}
        <Modal
          title="C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng"
          open={isModalVisible}
          onOk={handleOk}
          onCancel={handleCancel}
          okText="C·∫≠p nh·∫≠t"
          cancelText="H·ªßy"
          centered
          confirmLoading={loading}
        >
          <Form layout="vertical" form={form}>
            <Form.Item
              name="fullName"
              label="H·ªç v√† t√™n"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n!" },
                { min: 3, message: "T√™n ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±!" },
                { max: 50, message: "T√™n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50 k√Ω t·ª±!" },
              ]}
            >
              <Input placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß" />
            </Form.Item>

            <Form.Item
              name="phone"
              label="S·ªë ƒëi·ªán tho·∫°i"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!" },
                {
                  pattern: /^\d{10,11}$/,
                  message: "S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10‚Äì11 ch·ªØ s·ªë!",
                },
              ]}
            >
              <Input placeholder="VD: 0912345678" />
            </Form.Item>

            <Form.Item
              name="address"
              label="ƒê·ªãa ch·ªâ"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!" },
                { min: 5, message: "ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±!" },
              ]}
            >
              <Input.TextArea
                rows={2}
                placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ hi·ªán t·∫°i c·ªßa b·∫°n"
              />
            </Form.Item>

            {/* <Form.Item
            name="avatar"
            label="·∫¢nh ƒë·∫°i di·ªán"
            valuePropName="fileList"
          >
            <Upload
              showUploadList={false}
              beforeUpload={() => false}
              onChange={handleUpload}
            >
              <Button icon={<UploadOutlined />}>Ch·ªçn ·∫£nh</Button>
            </Upload>
            {form.getFieldValue("avatar") && (
              <Avatar
                src={form.getFieldValue("avatar")}
                size={64}
                style={{ marginTop: 10, border: "1px solid #eee" }}
              />
            )}
          </Form.Item> */}
          </Form>
        </Modal>
      </Card>
    </div>
  );
};

export default UserProfile;
